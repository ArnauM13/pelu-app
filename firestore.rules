rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function hasPermission(permission) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions[permission] == true;
    }

    function isBookingOwner(bookingData) {
      return isAuthenticated() &&
        bookingData.email == request.auth.token.email;
    }

    function isNotPastBooking(bookingData) {
      // For now, just check if the booking has valid data
      // The actual time validation can be handled in the application layer
      return bookingData.data != null && bookingData.hora != null;
    }

    // Col·lecció d'usuaris
    match /users/{userId} {
      // Usuaris poden llegir/escriure només les seves pròpies dades
      allow read, write: if isOwner(userId);

      // Administradors poden llegir totes les dades d'usuari
      allow read: if isAdmin();

      // Administradors poden actualitzar rols i permisos
      allow update: if isAdmin() &&
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'permissions', 'updatedAt']));
    }

    // Col·lecció de serveis
    match /services/{serviceId} {
      // Tots els usuaris autenticats poden llegir serveis
      allow read: if request.auth != null;

      // Només administradors poden crear/actualitzar/eliminar serveis
      allow write: if isAdmin();
    }

    // Col·lecció de categories de serveis
    match /serviceCategories/{categoryId} {
      // Tots els usuaris autenticats poden llegir categories
      allow read: if isAuthenticated();

      // Només administradors poden crear/actualitzar/eliminar categories
      allow write: if isAdmin();
    }

    // Col·lecció de reserves (bookings)
    match /bookings/{bookingId} {
      // Permetre creació de reserves (anònimes i autenticades)
      allow create: if true;

      // Usuaris autenticats poden llegir totes les reserves (per veure el calendari)
      allow read: if isAuthenticated();

      // Usuaris poden actualitzar les seves pròpies reserves si no han passat
      allow update: if isBookingOwner(resource.data) && isNotPastBooking(request.resource.data);

      // Usuaris poden eliminar les seves pròpies reserves si no han passat
      allow delete: if isBookingOwner(resource.data) && isNotPastBooking(resource.data);

      // Permetre accés amb token d'edició (per usuaris anònims)
      allow read: if resource.data.editToken == request.query.token;

      // Permetre actualització amb token d'edició (per usuaris anònims)
      allow update: if resource.data.editToken == request.query.token &&
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['nom', 'email', 'data', 'hora', 'serviceId', 'serviceName', 'duration', 'price', 'notes', 'uid', 'updatedAt']));

      // Administradors poden gestionar totes les reserves (llegir, actualitzar i eliminar)
      allow read, write: if isAdmin();
    }

    // Col·lecció de preferències d'idioma
    match /userPreferences/{userId} {
      // Usuaris poden llegir/escriure només les seves pròpies preferències
      allow read, write: if isOwner(userId);
    }

    // Col·lecció de configuració del sistema
    match /system/{document} {
      // Tots els usuaris autenticats poden llegir la configuració del sistema
      allow read: if isAuthenticated();

      // Només administradors poden modificar la configuració del sistema
      allow write: if isAdmin();
    }

    // Regla per defecte: denegar tot el que no estigui explícitament permès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
